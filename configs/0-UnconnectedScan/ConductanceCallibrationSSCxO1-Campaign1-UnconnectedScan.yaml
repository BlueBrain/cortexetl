---
simulation_campaign: /gpfs/bbp.cscs.ch/project/proj83/scratch/bbp_workflow/sscx_O1_conductance_callibration/9da0abcb-25fe-43a4-8d5b-6cc3402fc3e4/config.json
output: /gpfs/bbp.cscs.ch/project/proj83/home/isbister/blueetl_ji_output/ConductanceCallibrationSSCxO1-Campaign1-UnconnectedScan/

independent_variables: ["ornstein_uhlenbeck_mean_pct", "ornstein_uhlenbeck_sd_pct"]
raster_windows: ['full_sim', 'unconn_2nd_half']
fr_df_windows: ['unconn_2nd_half']

extract_fr_df: True
plot_individual_simulations: False
plot_3x3s: False
print_coupled_coords_from_mask: False
plot_multi_sim_analysis: False
create_multi_sim_summary_pdfs: False

fr_df_name: "data_PLACEHOLDER.parquet" # Wasn't used previously


extraction:
  neuron_classes:
    L1_EXC: { layer: [ 1 ], synapse_class: [ EXC ] }
    L23_EXC: { layer: [ 2, 3 ], synapse_class: [ EXC ] }
    L4_EXC: { layer: [ 4 ], synapse_class: [ EXC ] }
    L5_EXC: { layer: [ 5 ], synapse_class: [ EXC ] }
    L6_EXC: { layer: [ 6 ], synapse_class: [ EXC ] }
    L1_INH: { layer: [ 1 ], synapse_class: [ INH ] }
    L23_INH: { layer: [ 2, 3 ], synapse_class: [ INH ] }
    L4_INH: { layer: [ 4 ], synapse_class: [ INH ] }
    L5_INH: { layer: [ 5 ], synapse_class: [ INH ] }
    L6_INH: { layer: [ 6 ], synapse_class: [ INH ] }
    # ALL_INH: { synapse_class: [ INH ], $limit: null }
    # ALL_EXC: { synapse_class: [ EXC ], $limit: null }
#    ALL: { $limit: null }
  limit: null
  target: hex0
  windows:
    unconn_2nd_half: { bounds: [ 500, 1000 ], window_type: spontaneous }
    unconn: { bounds: [ 0, 1000 ], window_type: spontaneous }
    full_sim: { bounds: [ 0, 1000 ], window_type: spontaneous }
    # conn_spont: { bounds: [ 1500, 2500 ], window_type: spontaneous }

    # stim_0: { bounds: [ 2500, 2600 ], window_type: spontaneous }
    # stim_1: { bounds: [ 3000, 3100 ], window_type: spontaneous }
    # stim_2: { bounds: [ 3500, 3600 ], window_type: spontaneous }
    # stim_3: { bounds: [ 4000, 4100 ], window_type: spontaneous }
    # stim_4: { bounds: [ 4500, 4600 ], window_type: spontaneous }


    # full_sim: { bounds: [ 0, 2500 ], window_type: spontaneous }
    # multi_trial_stim_onset_100ms: { bounds: [ 0, 100 ], initial_offset: 2500, n_trials: 5, trial_steps_value: 500 }
  # trial_steps:
  #   ts1:
  #     function: blueetl.external.bnac.calculate_trial_step.onset_from_spikes
  #     initial_offset: 7000
  #     bounds: [ -50, 25 ]
  #     pre_window: [ -50, 0 ]
  #     post_window: [ 0, 25 ]
  #     smoothing_width: 1.5
  #     histo_bins_per_ms: 5
  #     threshold_std_multiple: 4
  #     ms_post_offset: 1
  #     fig_paths: [ ]
analysis:
  features:
    - type: multi
      groupby: [ simulation_id, circuit_id, neuron_class, window ]
      function: calculate_features.calculate_features_multi
      params: 
        export_all_neurons: true
        histograms:
          1ms:
            bin_size: 1.0
            smoothing:

              1sd:
                smoothing_type: Gaussian
                kernel_sd: 1.0

              # 3sd:
              #   smoothing_type: Gaussian
              #   kernel_sd: 3.0

              # 5sd:
              #   smoothing_type: Gaussian
              #   kernel_sd: 5.0

          3ms:
            bin_size: 3.0
            smoothing:

              1sd:
                smoothing_type: Gaussian
                kernel_sd: 1.0

              # 3sd:
              #   smoothing_type: Gaussian
              #   kernel_sd: 3.0

              # 5sd:
              #   smoothing_type: Gaussian
              #   kernel_sd: 5.0

          # 5ms:
          #   bin_size: 5.0
          #   smoothing:

          #     1sd:
          #       smoothing_type: Gaussian
          #       kernel_sd: 1.0

          #     3sd:
          #       smoothing_type: Gaussian
          #       kernel_sd: 3.0

          #     5sd:
          #       smoothing_type: Gaussian
          #       kernel_sd: 5.0

          # 10ms:
          #   bin_size: 10.0
          #   smoothing:

          #     1sd:
          #       smoothing_type: Gaussian
          #       kernel_sd: 1.0

          #     3sd:
          #       smoothing_type: Gaussian
          #       kernel_sd: 3.0

          #     5sd:
          #       smoothing_type: Gaussian
          #       kernel_sd: 5.0

          # 20ms:
          #   bin_size: 20.0
          #   smoothing:

          #     1sd:
          #       smoothing_type: Gaussian
          #       kernel_sd: 1.0
              
          #     3sd:
          #       smoothing_type: Gaussian
          #       kernel_sd: 3.0

          #     5sd:
          #       smoothing_type: Gaussian
          #       kernel_sd: 5.0